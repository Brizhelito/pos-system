generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  product   product[]
}

model customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  idNumber  String?  @unique
  idType    idType   @default(VENEZOLANO)
  sale      sale[]

  @@index([idType, idNumber])
}

model invoice {
  id            Int                    @id @default(autoincrement())
  saleId        Int                    @unique(map: "Invoice_saleId_key")
  number        String
  date          DateTime               @default(now())
  createdAt     DateTime               @default(now())
  updatedAt     DateTime
  invoiceStatus invoice_invoiceStatus?
  sale          sale                   @relation(fields: [saleId], references: [id], map: "invoice_sale_fkey")
}

model product {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  purchasePrice Float
  sellingPrice  Float
  stock         Int
  minStock      Int
  categoryId    Int
  providerId    Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime
  category      category   @relation(fields: [categoryId], references: [id], map: "product_category_fkey")
  provider      provider   @relation(fields: [providerId], references: [id], map: "product_provider_fkey")
  saleitem      saleitem[]

  @@index([categoryId], map: "product_category_idx")
  @@index([providerId], map: "product_provider_idx")
}

model provider {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  product   product[]
}

model sale {
  id            Int                @id @default(autoincrement())
  customerId    Int
  userId        Int
  saleDate      DateTime           @default(now())
  totalAmount   Float
  paymentMethod sale_paymentMethod
  status        sale_status        @default(PENDING)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime
  invoice       invoice?
  customer      customer           @relation(fields: [customerId], references: [id], map: "sale_customer_fkey")
  user          user               @relation(fields: [userId], references: [id], map: "sale_user_fkey")
  saleitem      saleitem[]

  @@index([customerId], map: "sale_customer_idx")
  @@index([userId], map: "sale_user_idx")
}

model saleitem {
  id        Int     @id @default(autoincrement())
  saleId    Int
  productId Int
  quantity  Int
  unitPrice Float
  subtotal  Float
  product   product @relation(fields: [productId], references: [id], map: "saleitem_product_fkey")
  sale      sale    @relation(fields: [saleId], references: [id], map: "saleitem_sale_fkey")

  @@index([productId], map: "saleitem_product_idx")
  @@index([saleId], map: "saleitem_sale_idx")
}

model user {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique(map: "User_email_key")
  password  String
  role      user_role @default(SELLER)
  createdAt DateTime  @default(now())
  updatedAt DateTime
  sale      sale[]
}

enum user_role {
  SELLER
  ADMIN
}

enum sale_paymentMethod {
  EFECTIVO
  PAGO_MOVIL
  TRANSFERENCIA
  PUNTO_DE_VENTA
}

enum invoice_invoiceStatus {
  ISSUED
  PAID
  CANCELLED
}

enum sale_status {
  PENDING
  COMPLETED
  CANCELLED
}

enum idType {
  VENEZOLANO
  EXTRANJERO
  PASAPORTE
  JURIDICO
  OTRO
}
